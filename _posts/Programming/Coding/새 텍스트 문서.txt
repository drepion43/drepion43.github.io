---
title:  "깊이 우선 탐색(DFS)"
categories: Coding
tag: [Coding, Solution]
tags: [Jekyll, MathJax]
toc: true
author_profile: false
sidebar:
    nav: "docs"
use_math: true
---

## 깊이 우선 탐색

DFS는 깊이 우선 탐색이며, 그래프에서 깊은 부분을 우선적으로 탐색하는 알고리즘   
루트 노드(혹은 다른 임의의 노드)에서 시작해서 다음 분기(branch)로 넘어가기 전에 해당 분기를 완벽하게 탐색하는 방법   
즉, 한 방향으로 갈 수 있을 때까지 계속 가다가 더 이상 갈 수 없게 되면 다시 가장 가까운 갈림길로 돌아와 다른 방향으로 이동하며 탐색을 진행하는 방법   
넓게(wide) 탐색하기 전에 깊게(deep) 탐색하는 것   
모든 노드들을 방문할 시 해당 방법을 사용   
**Back Tracking에서도 사용**   
<span style='color:red'>**단, DFS와 비슷하지만 다른 BFS보다는 느림**</span>   
자기 자신을 호출하는 재귀 알고리즘(순환 알고리즘) 형태   
Pre-Order 또한 DFS 방법 사용  
 <span style='color:red'>**어떤 노드를 방문했는지에 대한 Check!!가 필수, 이를 수행하지 않을 시 무한 루프에 빠지는 문제가 발생**</span>

### 동작 과정

스택 자료구조(재귀 함수)를 이용   
① 탐색 시작 노드를 스택에 삽입하고 방문 처리   
② 스택의 최상단 노드에 방문하지 않은 인접 노드가 하나라도 존재하면 해당 노드를 스택에 넣고 방문 처리  
③ 방문하지 않은 인접 노드가 없으면 스택에서 최상단 노드를 꺼냄  
④ 2번 과정을 더 이상 수행할 수 없을 때까지 반복 수행   
![dfs](../../assets/images/Coding/2023-08-28-DFS/dfs.png)

① 0번 노드에서 시작하며 0번 노드를 방문했다는 표시   
② 그 후 0번 노드에서 갈 수 있는 1번 노드를 방문한 후 1번 노드를 방문했다는 표시   
③ 그 후 1번 노드에서 갈 수 있는 2번 노드를 방문 후, 2번 노드에 방문 표시  
④ 2번과 연결되 어 있는 3번 노드를 방문 후 3번 노드에 방문 표시   
⑤ 3번 노드에서 4번 노드로 갈 수 있으니 4번 노드로 이동후 4번 노드에 방문 표시   
⑥ 4번 노드에서 갈 수 있는 0번 3번 2번 노드 모두 방문 처리가 되어 있는 상태이니 4번을 방문 하기 전인 3번 노드로 **Back Tracking**   
⑦ 3번 노드에서도 이전에 갔던 4번 노드를 제외한 경우 갈 수 있는 노드가 없으니 2번 노드로 **Back Tracking**   
⑧ 2번 노드에서도 이전에 갔던 3번 노드와 2번 노드로 오기 위해 이전에 있었던 1번 노드를 제외한 0번 노드와 4번 노드의 길만 존재하지만, 둘 모두 방문 처리가 되어있으니 1번 노드로 **Back Tracking**   
⑨ 이와 같이 수행하면 결국 0번 노드로 돌아 온 후, 해당 그래프에서 이동 했던 방향인 0 &rarr;?1 &rarr;?2 &rarr;?3 &rarr; 4의 탐색 결과 도출

### 시간 복잡도

DFS의 경우 그래프의 정점 수 : N, 간선의 수 : E 일 때, 모든 간선을 조회하니 인접 리스트로 구현된 경우 : <span style='color:red'>**$O(N + E)$**</span>   
인접 행렬로 구현된 경우 : <span style='color:red'>**$O(N^2)$**</span>    

### 구현